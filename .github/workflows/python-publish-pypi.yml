name: Publish Python Package - PyPI
# This workflow will upload a PyPI Python Package using Twine

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: read

jobs:
  local_test:
    name: Local Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Build Local Package
        run: make dist

      - name: Install Test Package
        run: |
          pip install -r requirements.txt
          pip install dist/scanoss*.whl

      - name: Run Tests
        run: python -m unittest tests/winnowing-test.py

  package_source:
    if: success()
    needs: [ local_test ]
    name: Publish Source Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Build Source Package
        run: make src_dist

      - name: List Source Package
        run: ls -la dist/

#      - name: Publish Test Source Package
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
##          skip_existing: true
#          user: __token__
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Cache Source Package
      - uses: actions/upload-artifact@v3
        with:
          name: scanoss-wheels
          path: ./dist/*tar.gz


  build_wheels:
    if: success()
    needs: [ local_test ]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_ARCHS_WINDOWS: AMD64 ARM64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_SKIP: pp*

      - name: List Packages
        continue-on-error: true
        run: ls ./wheelhouse/

      - name: Cache ${{ matrix.os }} Wheels
      - uses: actions/upload-artifact@v3
        with:
          name: scanoss-wheels
          path: ./wheelhouse/*.whl

  upload_wheels:
    if: success()
    needs: [ build_wheels, package_source ]
    name: Upload Wheels
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: scanoss-wheels
          path: |
            wheelhouse
            dist

      - name: List Packages
        continue-on-error: true
        run: |
          ls -la wheelhouse/
          ls -la dist/

#      - name: Publish Test Package
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
##          skip_existing: true
#          packages_dir: wheelhouse
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}

#      - name: Release
#        if: ${{ github.ref_type == 'tag' }} && ${{ github.ref_name != '' }}
#        uses: softprops/action-gh-release@v1
#        with:
#          draft: true
#          files: |
#            wheelhouse/*.whl
#            dist/*.tar.gz

#      - name: Release ${{ github.ref_type }} - ${{ github.ref_name }}
#        if: ${{ github.ref_type == 'tag' }} && ${{ github.ref_name != '' }} && startsWith(github.ref_name, 'v')
#        run: echo "Running Release step..."
